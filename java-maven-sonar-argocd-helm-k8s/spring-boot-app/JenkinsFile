pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket to access the host's Docker daemon
    }
  }

  environment {
    // Docker image details
    DOCKER_REGISTRY = 'vishalcloud307'                    // Docker Hub registry username
    IMAGE_NAME = 'ultimate-cicd'                           // Docker image name
    K8S_CLUSTER = 'minikube'                               // Minikube context name
    K8S_NAMESPACE = 'default'                              // Kubernetes namespace

    // GIT Configuration
    GIT_REPO_NAME = "java-project"                         // Git repo name
    GIT_USER_NAME = "vishal307-ux"                         // Git user name
    GIT_EMAIL = "vishalguptav307@gmail.com"                // Git user email

    // Docker image versioning based on Jenkins build number
    DOCKER_IMAGE = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"
    REGISTRY_CREDENTIALS = credentials('docker-cred')      // Docker registry credentials
  }

  stages {
    stage('Checkout') {
      steps {
        // Optionally checkout code, if needed
        // git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-ZeroToHero.git'
        echo 'Checkout step completed (no actual checkout in this stage)'
      }
    }

    stage('Build and Test') {
      steps {
        // List files in the current directory
        sh 'ls -ltr'

        // Navigate to the app folder and build the project using Maven
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          // Build Docker image from the app's Dockerfile
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'

          // Push the Docker image to the registry
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          // Configure Git user details
          sh '''
            git config user.email "${GIT_EMAIL}"
            git config user.name "${GIT_USER_NAME}"
            
            // Replace the image tag in the deployment YAML with the build number
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

            // Commit and push the updated deployment YAML
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }

    stage('Deploy to Minikube') {
      steps {
        script {
          // Ensure Minikube context is selected
          sh 'kubectl config use-context minikube'

          // Apply the updated deployment YAML to Minikube
          sh 'kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml --namespace=$K8S_NAMESPACE'

          // Wait for deployment to complete
          sh 'kubectl rollout status deployment/my-app --namespace=$K8S_NAMESPACE'
        }
      }
    }
  }

  post {
    success {
      echo "Deployment completed successfully!"
    }
    failure {
      echo "Deployment failed!"
    }
  }
}
